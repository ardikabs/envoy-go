// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_envoy

import (
	api "github.com/envoyproxy/envoy/contrib/golang/common/go/api"
	mock "github.com/stretchr/testify/mock"
)

// ConfigCallbackHandler is an autogenerated mock type for the ConfigCallbackHandler type
type ConfigCallbackHandler struct {
	mock.Mock
}

type ConfigCallbackHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfigCallbackHandler) EXPECT() *ConfigCallbackHandler_Expecter {
	return &ConfigCallbackHandler_Expecter{mock: &_m.Mock}
}

// DefineCounterMetric provides a mock function with given fields: name
func (_m *ConfigCallbackHandler) DefineCounterMetric(name string) api.CounterMetric {
	ret := _m.Called(name)

	var r0 api.CounterMetric
	if rf, ok := ret.Get(0).(func(string) api.CounterMetric); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.CounterMetric)
		}
	}

	return r0
}

// ConfigCallbackHandler_DefineCounterMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefineCounterMetric'
type ConfigCallbackHandler_DefineCounterMetric_Call struct {
	*mock.Call
}

// DefineCounterMetric is a helper method to define mock.On call
//   - name string
func (_e *ConfigCallbackHandler_Expecter) DefineCounterMetric(name interface{}) *ConfigCallbackHandler_DefineCounterMetric_Call {
	return &ConfigCallbackHandler_DefineCounterMetric_Call{Call: _e.mock.On("DefineCounterMetric", name)}
}

func (_c *ConfigCallbackHandler_DefineCounterMetric_Call) Run(run func(name string)) *ConfigCallbackHandler_DefineCounterMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConfigCallbackHandler_DefineCounterMetric_Call) Return(_a0 api.CounterMetric) *ConfigCallbackHandler_DefineCounterMetric_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConfigCallbackHandler_DefineCounterMetric_Call) RunAndReturn(run func(string) api.CounterMetric) *ConfigCallbackHandler_DefineCounterMetric_Call {
	_c.Call.Return(run)
	return _c
}

// DefineGaugeMetric provides a mock function with given fields: name
func (_m *ConfigCallbackHandler) DefineGaugeMetric(name string) api.GaugeMetric {
	ret := _m.Called(name)

	var r0 api.GaugeMetric
	if rf, ok := ret.Get(0).(func(string) api.GaugeMetric); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.GaugeMetric)
		}
	}

	return r0
}

// ConfigCallbackHandler_DefineGaugeMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefineGaugeMetric'
type ConfigCallbackHandler_DefineGaugeMetric_Call struct {
	*mock.Call
}

// DefineGaugeMetric is a helper method to define mock.On call
//   - name string
func (_e *ConfigCallbackHandler_Expecter) DefineGaugeMetric(name interface{}) *ConfigCallbackHandler_DefineGaugeMetric_Call {
	return &ConfigCallbackHandler_DefineGaugeMetric_Call{Call: _e.mock.On("DefineGaugeMetric", name)}
}

func (_c *ConfigCallbackHandler_DefineGaugeMetric_Call) Run(run func(name string)) *ConfigCallbackHandler_DefineGaugeMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConfigCallbackHandler_DefineGaugeMetric_Call) Return(_a0 api.GaugeMetric) *ConfigCallbackHandler_DefineGaugeMetric_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConfigCallbackHandler_DefineGaugeMetric_Call) RunAndReturn(run func(string) api.GaugeMetric) *ConfigCallbackHandler_DefineGaugeMetric_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfigCallbackHandler creates a new instance of ConfigCallbackHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigCallbackHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigCallbackHandler {
	mock := &ConfigCallbackHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
