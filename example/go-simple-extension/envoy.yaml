# envoy demo with golang extension enabled
stats_config:
  stats_tags:
    - tag_name: host
      regex: '(_host=([a-z0-9-\.]+)[:\d]*)'
    - tag_name: method
      regex: "(_method=([a-zA-Z]+))"
    - tag_name: response_code
      regex: "(_response_code=([0-9]+))"
    - tag_name: response_flags
      regex: '(_response_flags=([\d]+)_upstream_name)'
    - tag_name: upstream_name
      regex: '(_upstream_name=([a-zA-Z0-9-_\/]+)_route_name)'
    - tag_name: route_name
      regex: '(_route_name=([a-zA-Z0-9-_\/]+))'

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001

static_resources:
  listeners:
    - name: listener_0
      per_connection_buffer_limit_bytes: 1024000
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 10000
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                always_set_request_id_in_response: true
                codec_type: auto
                accessLog:
                  - name: envoy.access_loggers.file
                    typedConfig:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      logFormat:
                        textFormatSource:
                          inlineString: |
                            {"start_time":"%START_TIME%","method":"%REQ(:METHOD)%","path":"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%","protocol":"%PROTOCOL%","response_code":"%RESPONSE_CODE%","response_flags":"%RESPONSE_FLAGS%","response_code_details":"%RESPONSE_CODE_DETAILS%","connection_termination_details":"%CONNECTION_TERMINATION_DETAILS%","upstream_transport_failure_reason":"%UPSTREAM_TRANSPORT_FAILURE_REASON%","bytes_received":"%BYTES_RECEIVED%","bytes_sent":"%BYTES_SENT%","duration":"%DURATION%","x-envoy-upstream-service-time":"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%","x-forwarded-for":"%REQ(X-FORWARDED-FOR)%","user-agent":"%REQ(USER-AGENT)%","x-request-id":"%REQ(X-REQUEST-ID)%",":authority":"%REQ(:AUTHORITY)%","upstream_host":"%UPSTREAM_HOST%","upstream_cluster":"%UPSTREAM_CLUSTER%","upstream_local_address":"%UPSTREAM_LOCAL_ADDRESS%","downstream_local_address":"%DOWNSTREAM_LOCAL_ADDRESS%","downstream_remote_address":"%DOWNSTREAM_REMOTE_ADDRESS%","requested_server_name":"%REQUESTED_SERVER_NAME%","route_name":"%ROUTE_NAME%"}
                      path: /dev/stdout
                http_filters:
                  # - name: envoy.filters.http.golang
                  #   typed_config:
                  #     "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config
                  #     library_id: go-simple-extension
                  #     library_path: "/lib/filter.so"
                  #     plugin_name: mystats
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        example:
                          claim_to_headers:
                            - claim_name: name
                              header_name: x-claim-name
                          remote_jwks:
                            http_uri:
                              cluster: raw.githubusercontent.com||443
                              timeout: 5s
                              uri: https://raw.githubusercontent.com/envoyproxy/gateway/main/examples/kubernetes/authn/jwks.json
                          from_headers:
                            - name: Authorization
                              value_prefix: "Bearer "
                          from_params:
                            - access_token
                          from_cookies:
                            - session_access_token
                      requirement_map:
                        optional:
                          requires_any:
                            requirements:
                              - provider_name: example
                              - allow_missing: {}
                  - name: envoy.filters.http.golang
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config
                      library_id: go-simple-extension
                      library_path: "/lib/filter.so"
                      plugin_name: myfilter
                      plugin_config:
                        "@type": type.googleapis.com/xds.type.v3.TypedStruct
                        value:
                          parent_only: parent-bar
                          request_headers:
                            foo: bar
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: ["*"]
                      routes:
                        - name: details-page
                          match:
                            prefix: "/details"
                          route:
                            cluster: helloworld_service_cluster
                          typed_per_filter_config:
                            envoy.filters.http.jwt_authn:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.PerRouteConfig
                              requirement_name: optional
                            envoy.filters.http.golang:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute
                              plugins_config:
                                myfilter:
                                  config:
                                    "@type": type.googleapis.com/xds.type.v3.TypedStruct
                                    value:
                                      request_headers:
                                        x-foo: x-bar
                        - name: index-html-page
                          match:
                            prefix: "/index.html"
                          route:
                            cluster: helloworld_service_cluster
                        - name: invalid-page
                          match:
                            prefix: "/invalid"
                          direct_response:
                            status: 200
                            body:
                              inline_string: "Invalid Request"
                          typed_per_filter_config:
                            envoy.filters.http.golang:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute
                              plugins_config:
                                myfilter:
                                  config:
                                    "@type": type.googleapis.com/xds.type.v3.TypedStruct
                                    value:
                                      invalid: true
                        - name: response-body-off
                          match:
                            prefix: "/response-body-off"
                          direct_response:
                            status: 200
                            body:
                              inline_string: '{"name":"John Doe"}'
                          response_headers_to_add:
                            - header:
                                key: "x-response-body-access"
                                value: "Off"
                            - header:
                                key: "content-type"
                                value: "application/json"
                        - name: response-body-on
                          match:
                            prefix: "/response-body"
                          direct_response:
                            status: 200
                            body:
                              inline_string: '{"name":"John Doe"}'
                          response_headers_to_add:
                            - header:
                                key: "content-type"
                                value: "application/json"
                        - name: root
                          match:
                            prefix: "/"
                          route:
                            cluster: podinfo_service_cluster
                          typed_per_filter_config:
                            envoy.filters.http.jwt_authn:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.PerRouteConfig
                              requirement_name: optional
                            envoy.filters.http.golang:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute
                              plugins_config:
                                myfilter:
                                  config:
                                    "@type": type.googleapis.com/xds.type.v3.TypedStruct
                                    value:
                                      request_headers:
                                        boo: far
  clusters:
    - name: helloworld_service_cluster
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: helloworld_service_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: helloworld_service
                      port_value: 8080
    - name: podinfo_service_cluster
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: podinfo_service_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: podinfo_service
                      port_value: 9898
    - name: raw.githubusercontent.com||443
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: raw.githubusercontent.com||443
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: raw.githubusercontent.com
                      port_value: 443
      per_connection_buffer_limit_bytes: 32768
      respect_dns_ttl: true
      dns_lookup_family: V4_ONLY
      connect_timeout: 10s
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            validation_context:
              trusted_ca:
                filename: /etc/ssl/certs/ca-certificates.crt
