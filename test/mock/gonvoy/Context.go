// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_gonvoy

import (
	gonvoy "github.com/ardikabs/gonvoy"
	api "github.com/envoyproxy/envoy/contrib/golang/common/go/api"

	http "net/http"

	logr "github.com/go-logr/logr"

	mock "github.com/stretchr/testify/mock"
)

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

type Context_Expecter struct {
	mock *mock.Mock
}

func (_m *Context) EXPECT() *Context_Expecter {
	return &Context_Expecter{mock: &_m.Mock}
}

// CanModifyRequestBody provides a mock function with given fields:
func (_m *Context) CanModifyRequestBody() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Context_CanModifyRequestBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanModifyRequestBody'
type Context_CanModifyRequestBody_Call struct {
	*mock.Call
}

// CanModifyRequestBody is a helper method to define mock.On call
func (_e *Context_Expecter) CanModifyRequestBody() *Context_CanModifyRequestBody_Call {
	return &Context_CanModifyRequestBody_Call{Call: _e.mock.On("CanModifyRequestBody")}
}

func (_c *Context_CanModifyRequestBody_Call) Run(run func()) *Context_CanModifyRequestBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_CanModifyRequestBody_Call) Return(_a0 bool) *Context_CanModifyRequestBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_CanModifyRequestBody_Call) RunAndReturn(run func() bool) *Context_CanModifyRequestBody_Call {
	_c.Call.Return(run)
	return _c
}

// CanModifyResponseBody provides a mock function with given fields:
func (_m *Context) CanModifyResponseBody() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Context_CanModifyResponseBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanModifyResponseBody'
type Context_CanModifyResponseBody_Call struct {
	*mock.Call
}

// CanModifyResponseBody is a helper method to define mock.On call
func (_e *Context_Expecter) CanModifyResponseBody() *Context_CanModifyResponseBody_Call {
	return &Context_CanModifyResponseBody_Call{Call: _e.mock.On("CanModifyResponseBody")}
}

func (_c *Context_CanModifyResponseBody_Call) Run(run func()) *Context_CanModifyResponseBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_CanModifyResponseBody_Call) Return(_a0 bool) *Context_CanModifyResponseBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_CanModifyResponseBody_Call) RunAndReturn(run func() bool) *Context_CanModifyResponseBody_Call {
	_c.Call.Return(run)
	return _c
}

// Committed provides a mock function with given fields:
func (_m *Context) Committed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Context_Committed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Committed'
type Context_Committed_Call struct {
	*mock.Call
}

// Committed is a helper method to define mock.On call
func (_e *Context_Expecter) Committed() *Context_Committed_Call {
	return &Context_Committed_Call{Call: _e.mock.On("Committed")}
}

func (_c *Context_Committed_Call) Run(run func()) *Context_Committed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Committed_Call) Return(_a0 bool) *Context_Committed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Committed_Call) RunAndReturn(run func() bool) *Context_Committed_Call {
	_c.Call.Return(run)
	return _c
}

// Configuration provides a mock function with given fields:
func (_m *Context) Configuration() gonvoy.Configuration {
	ret := _m.Called()

	var r0 gonvoy.Configuration
	if rf, ok := ret.Get(0).(func() gonvoy.Configuration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gonvoy.Configuration)
		}
	}

	return r0
}

// Context_Configuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configuration'
type Context_Configuration_Call struct {
	*mock.Call
}

// Configuration is a helper method to define mock.On call
func (_e *Context_Expecter) Configuration() *Context_Configuration_Call {
	return &Context_Configuration_Call{Call: _e.mock.On("Configuration")}
}

func (_c *Context_Configuration_Call) Run(run func()) *Context_Configuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Configuration_Call) Return(_a0 gonvoy.Configuration) *Context_Configuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Configuration_Call) RunAndReturn(run func() gonvoy.Configuration) *Context_Configuration_Call {
	_c.Call.Return(run)
	return _c
}

// GetProperty provides a mock function with given fields: name, defaultVal
func (_m *Context) GetProperty(name string, defaultVal string) (string, error) {
	ret := _m.Called(name, defaultVal)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(name, defaultVal)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, defaultVal)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, defaultVal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Context_GetProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProperty'
type Context_GetProperty_Call struct {
	*mock.Call
}

// GetProperty is a helper method to define mock.On call
//   - name string
//   - defaultVal string
func (_e *Context_Expecter) GetProperty(name interface{}, defaultVal interface{}) *Context_GetProperty_Call {
	return &Context_GetProperty_Call{Call: _e.mock.On("GetProperty", name, defaultVal)}
}

func (_c *Context_GetProperty_Call) Run(run func(name string, defaultVal string)) *Context_GetProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Context_GetProperty_Call) Return(_a0 string, _a1 error) *Context_GetProperty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Context_GetProperty_Call) RunAndReturn(run func(string, string) (string, error)) *Context_GetProperty_Call {
	_c.Call.Return(run)
	return _c
}

// JSON provides a mock function with given fields: code, b, headers, opts
func (_m *Context) JSON(code int, b []byte, headers map[string][]string, opts ...gonvoy.ReplyOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, code, b, headers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte, map[string][]string, ...gonvoy.ReplyOption) error); ok {
		r0 = rf(code, b, headers, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context_JSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSON'
type Context_JSON_Call struct {
	*mock.Call
}

// JSON is a helper method to define mock.On call
//   - code int
//   - b []byte
//   - headers map[string][]string
//   - opts ...gonvoy.ReplyOption
func (_e *Context_Expecter) JSON(code interface{}, b interface{}, headers interface{}, opts ...interface{}) *Context_JSON_Call {
	return &Context_JSON_Call{Call: _e.mock.On("JSON",
		append([]interface{}{code, b, headers}, opts...)...)}
}

func (_c *Context_JSON_Call) Run(run func(code int, b []byte, headers map[string][]string, opts ...gonvoy.ReplyOption)) *Context_JSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gonvoy.ReplyOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gonvoy.ReplyOption)
			}
		}
		run(args[0].(int), args[1].([]byte), args[2].(map[string][]string), variadicArgs...)
	})
	return _c
}

func (_c *Context_JSON_Call) Return(_a0 error) *Context_JSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_JSON_Call) RunAndReturn(run func(int, []byte, map[string][]string, ...gonvoy.ReplyOption) error) *Context_JSON_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: key, receiver
func (_m *Context) Load(key interface{}, receiver interface{}) (bool, error) {
	ret := _m.Called(key, receiver)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) (bool, error)); ok {
		return rf(key, receiver)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) bool); ok {
		r0 = rf(key, receiver)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}) error); ok {
		r1 = rf(key, receiver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Context_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type Context_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - key interface{}
//   - receiver interface{}
func (_e *Context_Expecter) Load(key interface{}, receiver interface{}) *Context_Load_Call {
	return &Context_Load_Call{Call: _e.mock.On("Load", key, receiver)}
}

func (_c *Context_Load_Call) Run(run func(key interface{}, receiver interface{})) *Context_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *Context_Load_Call) Return(ok bool, err error) *Context_Load_Call {
	_c.Call.Return(ok, err)
	return _c
}

func (_c *Context_Load_Call) RunAndReturn(run func(interface{}, interface{}) (bool, error)) *Context_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields:
func (_m *Context) Log() logr.Logger {
	ret := _m.Called()

	var r0 logr.Logger
	if rf, ok := ret.Get(0).(func() logr.Logger); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(logr.Logger)
	}

	return r0
}

// Context_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type Context_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
func (_e *Context_Expecter) Log() *Context_Log_Call {
	return &Context_Log_Call{Call: _e.mock.On("Log")}
}

func (_c *Context_Log_Call) Run(run func()) *Context_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Log_Call) Return(_a0 logr.Logger) *Context_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Log_Call) RunAndReturn(run func() logr.Logger) *Context_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Metrics provides a mock function with given fields:
func (_m *Context) Metrics() gonvoy.Metrics {
	ret := _m.Called()

	var r0 gonvoy.Metrics
	if rf, ok := ret.Get(0).(func() gonvoy.Metrics); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gonvoy.Metrics)
		}
	}

	return r0
}

// Context_Metrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metrics'
type Context_Metrics_Call struct {
	*mock.Call
}

// Metrics is a helper method to define mock.On call
func (_e *Context_Expecter) Metrics() *Context_Metrics_Call {
	return &Context_Metrics_Call{Call: _e.mock.On("Metrics")}
}

func (_c *Context_Metrics_Call) Run(run func()) *Context_Metrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Metrics_Call) Return(_a0 gonvoy.Metrics) *Context_Metrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Metrics_Call) RunAndReturn(run func() gonvoy.Metrics) *Context_Metrics_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterHandler provides a mock function with given fields: _a0
func (_m *Context) RegisterHandler(_a0 gonvoy.HttpFilterHandler) {
	_m.Called(_a0)
}

// Context_RegisterHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHandler'
type Context_RegisterHandler_Call struct {
	*mock.Call
}

// RegisterHandler is a helper method to define mock.On call
//   - _a0 gonvoy.HttpFilterHandler
func (_e *Context_Expecter) RegisterHandler(_a0 interface{}) *Context_RegisterHandler_Call {
	return &Context_RegisterHandler_Call{Call: _e.mock.On("RegisterHandler", _a0)}
}

func (_c *Context_RegisterHandler_Call) Run(run func(_a0 gonvoy.HttpFilterHandler)) *Context_RegisterHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.HttpFilterHandler))
	})
	return _c
}

func (_c *Context_RegisterHandler_Call) Return() *Context_RegisterHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_RegisterHandler_Call) RunAndReturn(run func(gonvoy.HttpFilterHandler)) *Context_RegisterHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields:
func (_m *Context) Request() *http.Request {
	ret := _m.Called()

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	return r0
}

// Context_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type Context_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *Context_Expecter) Request() *Context_Request_Call {
	return &Context_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *Context_Request_Call) Run(run func()) *Context_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Request_Call) Return(_a0 *http.Request) *Context_Request_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Request_Call) RunAndReturn(run func() *http.Request) *Context_Request_Call {
	_c.Call.Return(run)
	return _c
}

// RequestBody provides a mock function with given fields:
func (_m *Context) RequestBody() gonvoy.Body {
	ret := _m.Called()

	var r0 gonvoy.Body
	if rf, ok := ret.Get(0).(func() gonvoy.Body); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gonvoy.Body)
		}
	}

	return r0
}

// Context_RequestBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestBody'
type Context_RequestBody_Call struct {
	*mock.Call
}

// RequestBody is a helper method to define mock.On call
func (_e *Context_Expecter) RequestBody() *Context_RequestBody_Call {
	return &Context_RequestBody_Call{Call: _e.mock.On("RequestBody")}
}

func (_c *Context_RequestBody_Call) Run(run func()) *Context_RequestBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_RequestBody_Call) Return(_a0 gonvoy.Body) *Context_RequestBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_RequestBody_Call) RunAndReturn(run func() gonvoy.Body) *Context_RequestBody_Call {
	_c.Call.Return(run)
	return _c
}

// RequestHeader provides a mock function with given fields:
func (_m *Context) RequestHeader() gonvoy.Header {
	ret := _m.Called()

	var r0 gonvoy.Header
	if rf, ok := ret.Get(0).(func() gonvoy.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gonvoy.Header)
		}
	}

	return r0
}

// Context_RequestHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestHeader'
type Context_RequestHeader_Call struct {
	*mock.Call
}

// RequestHeader is a helper method to define mock.On call
func (_e *Context_Expecter) RequestHeader() *Context_RequestHeader_Call {
	return &Context_RequestHeader_Call{Call: _e.mock.On("RequestHeader")}
}

func (_c *Context_RequestHeader_Call) Run(run func()) *Context_RequestHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_RequestHeader_Call) Return(_a0 gonvoy.Header) *Context_RequestHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_RequestHeader_Call) RunAndReturn(run func() gonvoy.Header) *Context_RequestHeader_Call {
	_c.Call.Return(run)
	return _c
}

// Response provides a mock function with given fields:
func (_m *Context) Response() *http.Response {
	ret := _m.Called()

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func() *http.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	return r0
}

// Context_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type Context_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
func (_e *Context_Expecter) Response() *Context_Response_Call {
	return &Context_Response_Call{Call: _e.mock.On("Response")}
}

func (_c *Context_Response_Call) Run(run func()) *Context_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Response_Call) Return(_a0 *http.Response) *Context_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Response_Call) RunAndReturn(run func() *http.Response) *Context_Response_Call {
	_c.Call.Return(run)
	return _c
}

// ResponseBody provides a mock function with given fields:
func (_m *Context) ResponseBody() gonvoy.Body {
	ret := _m.Called()

	var r0 gonvoy.Body
	if rf, ok := ret.Get(0).(func() gonvoy.Body); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gonvoy.Body)
		}
	}

	return r0
}

// Context_ResponseBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResponseBody'
type Context_ResponseBody_Call struct {
	*mock.Call
}

// ResponseBody is a helper method to define mock.On call
func (_e *Context_Expecter) ResponseBody() *Context_ResponseBody_Call {
	return &Context_ResponseBody_Call{Call: _e.mock.On("ResponseBody")}
}

func (_c *Context_ResponseBody_Call) Run(run func()) *Context_ResponseBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_ResponseBody_Call) Return(_a0 gonvoy.Body) *Context_ResponseBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_ResponseBody_Call) RunAndReturn(run func() gonvoy.Body) *Context_ResponseBody_Call {
	_c.Call.Return(run)
	return _c
}

// ResponseHeader provides a mock function with given fields:
func (_m *Context) ResponseHeader() gonvoy.Header {
	ret := _m.Called()

	var r0 gonvoy.Header
	if rf, ok := ret.Get(0).(func() gonvoy.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gonvoy.Header)
		}
	}

	return r0
}

// Context_ResponseHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResponseHeader'
type Context_ResponseHeader_Call struct {
	*mock.Call
}

// ResponseHeader is a helper method to define mock.On call
func (_e *Context_Expecter) ResponseHeader() *Context_ResponseHeader_Call {
	return &Context_ResponseHeader_Call{Call: _e.mock.On("ResponseHeader")}
}

func (_c *Context_ResponseHeader_Call) Run(run func()) *Context_ResponseHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_ResponseHeader_Call) Return(_a0 gonvoy.Header) *Context_ResponseHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_ResponseHeader_Call) RunAndReturn(run func() gonvoy.Header) *Context_ResponseHeader_Call {
	_c.Call.Return(run)
	return _c
}

// ServeHttpFilter provides a mock function with given fields: _a0
func (_m *Context) ServeHttpFilter(_a0 gonvoy.HttpFilterPhase) api.StatusType {
	ret := _m.Called(_a0)

	var r0 api.StatusType
	if rf, ok := ret.Get(0).(func(gonvoy.HttpFilterPhase) api.StatusType); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(api.StatusType)
	}

	return r0
}

// Context_ServeHttpFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHttpFilter'
type Context_ServeHttpFilter_Call struct {
	*mock.Call
}

// ServeHttpFilter is a helper method to define mock.On call
//   - _a0 gonvoy.HttpFilterPhase
func (_e *Context_Expecter) ServeHttpFilter(_a0 interface{}) *Context_ServeHttpFilter_Call {
	return &Context_ServeHttpFilter_Call{Call: _e.mock.On("ServeHttpFilter", _a0)}
}

func (_c *Context_ServeHttpFilter_Call) Run(run func(_a0 gonvoy.HttpFilterPhase)) *Context_ServeHttpFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.HttpFilterPhase))
	})
	return _c
}

func (_c *Context_ServeHttpFilter_Call) Return(_a0 api.StatusType) *Context_ServeHttpFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_ServeHttpFilter_Call) RunAndReturn(run func(gonvoy.HttpFilterPhase) api.StatusType) *Context_ServeHttpFilter_Call {
	_c.Call.Return(run)
	return _c
}

// SetErrorHandler provides a mock function with given fields: _a0
func (_m *Context) SetErrorHandler(_a0 gonvoy.ErrorHandler) {
	_m.Called(_a0)
}

// Context_SetErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetErrorHandler'
type Context_SetErrorHandler_Call struct {
	*mock.Call
}

// SetErrorHandler is a helper method to define mock.On call
//   - _a0 gonvoy.ErrorHandler
func (_e *Context_Expecter) SetErrorHandler(_a0 interface{}) *Context_SetErrorHandler_Call {
	return &Context_SetErrorHandler_Call{Call: _e.mock.On("SetErrorHandler", _a0)}
}

func (_c *Context_SetErrorHandler_Call) Run(run func(_a0 gonvoy.ErrorHandler)) *Context_SetErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.ErrorHandler))
	})
	return _c
}

func (_c *Context_SetErrorHandler_Call) Return() *Context_SetErrorHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetErrorHandler_Call) RunAndReturn(run func(gonvoy.ErrorHandler)) *Context_SetErrorHandler_Call {
	_c.Call.Return(run)
	return _c
}

// SetRequestBody provides a mock function with given fields: _a0
func (_m *Context) SetRequestBody(_a0 api.BufferInstance) {
	_m.Called(_a0)
}

// Context_SetRequestBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRequestBody'
type Context_SetRequestBody_Call struct {
	*mock.Call
}

// SetRequestBody is a helper method to define mock.On call
//   - _a0 api.BufferInstance
func (_e *Context_Expecter) SetRequestBody(_a0 interface{}) *Context_SetRequestBody_Call {
	return &Context_SetRequestBody_Call{Call: _e.mock.On("SetRequestBody", _a0)}
}

func (_c *Context_SetRequestBody_Call) Run(run func(_a0 api.BufferInstance)) *Context_SetRequestBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.BufferInstance))
	})
	return _c
}

func (_c *Context_SetRequestBody_Call) Return() *Context_SetRequestBody_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetRequestBody_Call) RunAndReturn(run func(api.BufferInstance)) *Context_SetRequestBody_Call {
	_c.Call.Return(run)
	return _c
}

// SetRequestHeader provides a mock function with given fields: _a0
func (_m *Context) SetRequestHeader(_a0 api.RequestHeaderMap) {
	_m.Called(_a0)
}

// Context_SetRequestHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRequestHeader'
type Context_SetRequestHeader_Call struct {
	*mock.Call
}

// SetRequestHeader is a helper method to define mock.On call
//   - _a0 api.RequestHeaderMap
func (_e *Context_Expecter) SetRequestHeader(_a0 interface{}) *Context_SetRequestHeader_Call {
	return &Context_SetRequestHeader_Call{Call: _e.mock.On("SetRequestHeader", _a0)}
}

func (_c *Context_SetRequestHeader_Call) Run(run func(_a0 api.RequestHeaderMap)) *Context_SetRequestHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.RequestHeaderMap))
	})
	return _c
}

func (_c *Context_SetRequestHeader_Call) Return() *Context_SetRequestHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetRequestHeader_Call) RunAndReturn(run func(api.RequestHeaderMap)) *Context_SetRequestHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetResponseBody provides a mock function with given fields: _a0
func (_m *Context) SetResponseBody(_a0 api.BufferInstance) {
	_m.Called(_a0)
}

// Context_SetResponseBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResponseBody'
type Context_SetResponseBody_Call struct {
	*mock.Call
}

// SetResponseBody is a helper method to define mock.On call
//   - _a0 api.BufferInstance
func (_e *Context_Expecter) SetResponseBody(_a0 interface{}) *Context_SetResponseBody_Call {
	return &Context_SetResponseBody_Call{Call: _e.mock.On("SetResponseBody", _a0)}
}

func (_c *Context_SetResponseBody_Call) Run(run func(_a0 api.BufferInstance)) *Context_SetResponseBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.BufferInstance))
	})
	return _c
}

func (_c *Context_SetResponseBody_Call) Return() *Context_SetResponseBody_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetResponseBody_Call) RunAndReturn(run func(api.BufferInstance)) *Context_SetResponseBody_Call {
	_c.Call.Return(run)
	return _c
}

// SetResponseHeader provides a mock function with given fields: _a0
func (_m *Context) SetResponseHeader(_a0 api.ResponseHeaderMap) {
	_m.Called(_a0)
}

// Context_SetResponseHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResponseHeader'
type Context_SetResponseHeader_Call struct {
	*mock.Call
}

// SetResponseHeader is a helper method to define mock.On call
//   - _a0 api.ResponseHeaderMap
func (_e *Context_Expecter) SetResponseHeader(_a0 interface{}) *Context_SetResponseHeader_Call {
	return &Context_SetResponseHeader_Call{Call: _e.mock.On("SetResponseHeader", _a0)}
}

func (_c *Context_SetResponseHeader_Call) Run(run func(_a0 api.ResponseHeaderMap)) *Context_SetResponseHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.ResponseHeaderMap))
	})
	return _c
}

func (_c *Context_SetResponseHeader_Call) Return() *Context_SetResponseHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetResponseHeader_Call) RunAndReturn(run func(api.ResponseHeaderMap)) *Context_SetResponseHeader_Call {
	_c.Call.Return(run)
	return _c
}

// StatusType provides a mock function with given fields:
func (_m *Context) StatusType() api.StatusType {
	ret := _m.Called()

	var r0 api.StatusType
	if rf, ok := ret.Get(0).(func() api.StatusType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(api.StatusType)
	}

	return r0
}

// Context_StatusType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatusType'
type Context_StatusType_Call struct {
	*mock.Call
}

// StatusType is a helper method to define mock.On call
func (_e *Context_Expecter) StatusType() *Context_StatusType_Call {
	return &Context_StatusType_Call{Call: _e.mock.On("StatusType")}
}

func (_c *Context_StatusType_Call) Run(run func()) *Context_StatusType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_StatusType_Call) Return(_a0 api.StatusType) *Context_StatusType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_StatusType_Call) RunAndReturn(run func() api.StatusType) *Context_StatusType_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: key, value
func (_m *Context) Store(key interface{}, value interface{}) {
	_m.Called(key, value)
}

// Context_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type Context_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - key interface{}
//   - value interface{}
func (_e *Context_Expecter) Store(key interface{}, value interface{}) *Context_Store_Call {
	return &Context_Store_Call{Call: _e.mock.On("Store", key, value)}
}

func (_c *Context_Store_Call) Run(run func(key interface{}, value interface{})) *Context_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *Context_Store_Call) Return() *Context_Store_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Store_Call) RunAndReturn(run func(interface{}, interface{})) *Context_Store_Call {
	_c.Call.Return(run)
	return _c
}

// StreamInfo provides a mock function with given fields:
func (_m *Context) StreamInfo() api.StreamInfo {
	ret := _m.Called()

	var r0 api.StreamInfo
	if rf, ok := ret.Get(0).(func() api.StreamInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.StreamInfo)
		}
	}

	return r0
}

// Context_StreamInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamInfo'
type Context_StreamInfo_Call struct {
	*mock.Call
}

// StreamInfo is a helper method to define mock.On call
func (_e *Context_Expecter) StreamInfo() *Context_StreamInfo_Call {
	return &Context_StreamInfo_Call{Call: _e.mock.On("StreamInfo")}
}

func (_c *Context_StreamInfo_Call) Run(run func()) *Context_StreamInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_StreamInfo_Call) Return(_a0 api.StreamInfo) *Context_StreamInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_StreamInfo_Call) RunAndReturn(run func() api.StreamInfo) *Context_StreamInfo_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields: code, s, headers, opts
func (_m *Context) String(code int, s string, headers map[string][]string, opts ...gonvoy.ReplyOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, code, s, headers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, map[string][]string, ...gonvoy.ReplyOption) error); ok {
		r0 = rf(code, s, headers, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Context_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
//   - code int
//   - s string
//   - headers map[string][]string
//   - opts ...gonvoy.ReplyOption
func (_e *Context_Expecter) String(code interface{}, s interface{}, headers interface{}, opts ...interface{}) *Context_String_Call {
	return &Context_String_Call{Call: _e.mock.On("String",
		append([]interface{}{code, s, headers}, opts...)...)}
}

func (_c *Context_String_Call) Run(run func(code int, s string, headers map[string][]string, opts ...gonvoy.ReplyOption)) *Context_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gonvoy.ReplyOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gonvoy.ReplyOption)
			}
		}
		run(args[0].(int), args[1].(string), args[2].(map[string][]string), variadicArgs...)
	})
	return _c
}

func (_c *Context_String_Call) Return(_a0 error) *Context_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_String_Call) RunAndReturn(run func(int, string, map[string][]string, ...gonvoy.ReplyOption) error) *Context_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
