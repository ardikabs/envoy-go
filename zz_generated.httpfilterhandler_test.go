// Code generated by mockery v2.36.1. DO NOT EDIT.

package gonvoy

import mock "github.com/stretchr/testify/mock"

// MockHttpFilterHandler is an autogenerated mock type for the HttpFilterHandler type
type MockHttpFilterHandler struct {
	mock.Mock
}

type MockHttpFilterHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHttpFilterHandler) EXPECT() *MockHttpFilterHandler_Expecter {
	return &MockHttpFilterHandler_Expecter{mock: &_m.Mock}
}

// Disable provides a mock function with given fields:
func (_m *MockHttpFilterHandler) Disable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockHttpFilterHandler_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type MockHttpFilterHandler_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
func (_e *MockHttpFilterHandler_Expecter) Disable() *MockHttpFilterHandler_Disable_Call {
	return &MockHttpFilterHandler_Disable_Call{Call: _e.mock.On("Disable")}
}

func (_c *MockHttpFilterHandler_Disable_Call) Run(run func()) *MockHttpFilterHandler_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHttpFilterHandler_Disable_Call) Return(_a0 bool) *MockHttpFilterHandler_Disable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHttpFilterHandler_Disable_Call) RunAndReturn(run func() bool) *MockHttpFilterHandler_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// OnRequestBody provides a mock function with given fields: c
func (_m *MockHttpFilterHandler) OnRequestBody(c Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHttpFilterHandler_OnRequestBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRequestBody'
type MockHttpFilterHandler_OnRequestBody_Call struct {
	*mock.Call
}

// OnRequestBody is a helper method to define mock.On call
//   - c Context
func (_e *MockHttpFilterHandler_Expecter) OnRequestBody(c interface{}) *MockHttpFilterHandler_OnRequestBody_Call {
	return &MockHttpFilterHandler_OnRequestBody_Call{Call: _e.mock.On("OnRequestBody", c)}
}

func (_c *MockHttpFilterHandler_OnRequestBody_Call) Run(run func(c Context)) *MockHttpFilterHandler_OnRequestBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Context))
	})
	return _c
}

func (_c *MockHttpFilterHandler_OnRequestBody_Call) Return(_a0 error) *MockHttpFilterHandler_OnRequestBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHttpFilterHandler_OnRequestBody_Call) RunAndReturn(run func(Context) error) *MockHttpFilterHandler_OnRequestBody_Call {
	_c.Call.Return(run)
	return _c
}

// OnRequestHeader provides a mock function with given fields: c
func (_m *MockHttpFilterHandler) OnRequestHeader(c Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHttpFilterHandler_OnRequestHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRequestHeader'
type MockHttpFilterHandler_OnRequestHeader_Call struct {
	*mock.Call
}

// OnRequestHeader is a helper method to define mock.On call
//   - c Context
func (_e *MockHttpFilterHandler_Expecter) OnRequestHeader(c interface{}) *MockHttpFilterHandler_OnRequestHeader_Call {
	return &MockHttpFilterHandler_OnRequestHeader_Call{Call: _e.mock.On("OnRequestHeader", c)}
}

func (_c *MockHttpFilterHandler_OnRequestHeader_Call) Run(run func(c Context)) *MockHttpFilterHandler_OnRequestHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Context))
	})
	return _c
}

func (_c *MockHttpFilterHandler_OnRequestHeader_Call) Return(_a0 error) *MockHttpFilterHandler_OnRequestHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHttpFilterHandler_OnRequestHeader_Call) RunAndReturn(run func(Context) error) *MockHttpFilterHandler_OnRequestHeader_Call {
	_c.Call.Return(run)
	return _c
}

// OnResponseBody provides a mock function with given fields: c
func (_m *MockHttpFilterHandler) OnResponseBody(c Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHttpFilterHandler_OnResponseBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnResponseBody'
type MockHttpFilterHandler_OnResponseBody_Call struct {
	*mock.Call
}

// OnResponseBody is a helper method to define mock.On call
//   - c Context
func (_e *MockHttpFilterHandler_Expecter) OnResponseBody(c interface{}) *MockHttpFilterHandler_OnResponseBody_Call {
	return &MockHttpFilterHandler_OnResponseBody_Call{Call: _e.mock.On("OnResponseBody", c)}
}

func (_c *MockHttpFilterHandler_OnResponseBody_Call) Run(run func(c Context)) *MockHttpFilterHandler_OnResponseBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Context))
	})
	return _c
}

func (_c *MockHttpFilterHandler_OnResponseBody_Call) Return(_a0 error) *MockHttpFilterHandler_OnResponseBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHttpFilterHandler_OnResponseBody_Call) RunAndReturn(run func(Context) error) *MockHttpFilterHandler_OnResponseBody_Call {
	_c.Call.Return(run)
	return _c
}

// OnResponseHeader provides a mock function with given fields: c
func (_m *MockHttpFilterHandler) OnResponseHeader(c Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHttpFilterHandler_OnResponseHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnResponseHeader'
type MockHttpFilterHandler_OnResponseHeader_Call struct {
	*mock.Call
}

// OnResponseHeader is a helper method to define mock.On call
//   - c Context
func (_e *MockHttpFilterHandler_Expecter) OnResponseHeader(c interface{}) *MockHttpFilterHandler_OnResponseHeader_Call {
	return &MockHttpFilterHandler_OnResponseHeader_Call{Call: _e.mock.On("OnResponseHeader", c)}
}

func (_c *MockHttpFilterHandler_OnResponseHeader_Call) Run(run func(c Context)) *MockHttpFilterHandler_OnResponseHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Context))
	})
	return _c
}

func (_c *MockHttpFilterHandler_OnResponseHeader_Call) Return(_a0 error) *MockHttpFilterHandler_OnResponseHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHttpFilterHandler_OnResponseHeader_Call) RunAndReturn(run func(Context) error) *MockHttpFilterHandler_OnResponseHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHttpFilterHandler creates a new instance of MockHttpFilterHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHttpFilterHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHttpFilterHandler {
	mock := &MockHttpFilterHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
