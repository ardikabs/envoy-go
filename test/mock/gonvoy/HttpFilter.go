// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_gonvoy

import (
	gonvoy "github.com/ardikabs/gonvoy"
	mock "github.com/stretchr/testify/mock"
)

// HttpFilter is an autogenerated mock type for the HttpFilter type
type HttpFilter struct {
	mock.Mock
}

type HttpFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *HttpFilter) EXPECT() *HttpFilter_Expecter {
	return &HttpFilter_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *HttpFilter) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HttpFilter_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type HttpFilter_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *HttpFilter_Expecter) Name() *HttpFilter_Name_Call {
	return &HttpFilter_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *HttpFilter_Name_Call) Run(run func()) *HttpFilter_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HttpFilter_Name_Call) Return(_a0 string) *HttpFilter_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpFilter_Name_Call) RunAndReturn(run func() string) *HttpFilter_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnComplete provides a mock function with given fields: c
func (_m *HttpFilter) OnComplete(c gonvoy.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(gonvoy.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HttpFilter_OnComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnComplete'
type HttpFilter_OnComplete_Call struct {
	*mock.Call
}

// OnComplete is a helper method to define mock.On call
//   - c gonvoy.Context
func (_e *HttpFilter_Expecter) OnComplete(c interface{}) *HttpFilter_OnComplete_Call {
	return &HttpFilter_OnComplete_Call{Call: _e.mock.On("OnComplete", c)}
}

func (_c *HttpFilter_OnComplete_Call) Run(run func(c gonvoy.Context)) *HttpFilter_OnComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.Context))
	})
	return _c
}

func (_c *HttpFilter_OnComplete_Call) Return(_a0 error) *HttpFilter_OnComplete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpFilter_OnComplete_Call) RunAndReturn(run func(gonvoy.Context) error) *HttpFilter_OnComplete_Call {
	_c.Call.Return(run)
	return _c
}

// OnStart provides a mock function with given fields: c
func (_m *HttpFilter) OnStart(c gonvoy.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(gonvoy.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HttpFilter_OnStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStart'
type HttpFilter_OnStart_Call struct {
	*mock.Call
}

// OnStart is a helper method to define mock.On call
//   - c gonvoy.Context
func (_e *HttpFilter_Expecter) OnStart(c interface{}) *HttpFilter_OnStart_Call {
	return &HttpFilter_OnStart_Call{Call: _e.mock.On("OnStart", c)}
}

func (_c *HttpFilter_OnStart_Call) Run(run func(c gonvoy.Context)) *HttpFilter_OnStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.Context))
	})
	return _c
}

func (_c *HttpFilter_OnStart_Call) Return(_a0 error) *HttpFilter_OnStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpFilter_OnStart_Call) RunAndReturn(run func(gonvoy.Context) error) *HttpFilter_OnStart_Call {
	_c.Call.Return(run)
	return _c
}

// NewHttpFilter creates a new instance of HttpFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpFilter {
	mock := &HttpFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
