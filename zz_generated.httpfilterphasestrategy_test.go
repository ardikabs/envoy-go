// Code generated by mockery v2.36.1. DO NOT EDIT.

package gonvoy

import mock "github.com/stretchr/testify/mock"

// MockHttpFilterPhaseStrategy is an autogenerated mock type for the HttpFilterPhaseStrategy type
type MockHttpFilterPhaseStrategy struct {
	mock.Mock
}

type MockHttpFilterPhaseStrategy_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHttpFilterPhaseStrategy) EXPECT() *MockHttpFilterPhaseStrategy_Expecter {
	return &MockHttpFilterPhaseStrategy_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: c, first, last
func (_m *MockHttpFilterPhaseStrategy) Execute(c Context, first HttpFilterProcessor, last HttpFilterProcessor) (HttpFilterAction, error) {
	ret := _m.Called(c, first, last)

	var r0 HttpFilterAction
	var r1 error
	if rf, ok := ret.Get(0).(func(Context, HttpFilterProcessor, HttpFilterProcessor) (HttpFilterAction, error)); ok {
		return rf(c, first, last)
	}
	if rf, ok := ret.Get(0).(func(Context, HttpFilterProcessor, HttpFilterProcessor) HttpFilterAction); ok {
		r0 = rf(c, first, last)
	} else {
		r0 = ret.Get(0).(HttpFilterAction)
	}

	if rf, ok := ret.Get(1).(func(Context, HttpFilterProcessor, HttpFilterProcessor) error); ok {
		r1 = rf(c, first, last)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHttpFilterPhaseStrategy_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHttpFilterPhaseStrategy_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - c Context
//   - first HttpFilterProcessor
//   - last HttpFilterProcessor
func (_e *MockHttpFilterPhaseStrategy_Expecter) Execute(c interface{}, first interface{}, last interface{}) *MockHttpFilterPhaseStrategy_Execute_Call {
	return &MockHttpFilterPhaseStrategy_Execute_Call{Call: _e.mock.On("Execute", c, first, last)}
}

func (_c *MockHttpFilterPhaseStrategy_Execute_Call) Run(run func(c Context, first HttpFilterProcessor, last HttpFilterProcessor)) *MockHttpFilterPhaseStrategy_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Context), args[1].(HttpFilterProcessor), args[2].(HttpFilterProcessor))
	})
	return _c
}

func (_c *MockHttpFilterPhaseStrategy_Execute_Call) Return(_a0 HttpFilterAction, _a1 error) *MockHttpFilterPhaseStrategy_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHttpFilterPhaseStrategy_Execute_Call) RunAndReturn(run func(Context, HttpFilterProcessor, HttpFilterProcessor) (HttpFilterAction, error)) *MockHttpFilterPhaseStrategy_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHttpFilterPhaseStrategy creates a new instance of MockHttpFilterPhaseStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHttpFilterPhaseStrategy(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHttpFilterPhaseStrategy {
	mock := &MockHttpFilterPhaseStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
