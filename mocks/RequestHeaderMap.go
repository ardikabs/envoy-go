// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RequestHeaderMap is an autogenerated mock type for the RequestHeaderMap type
type RequestHeaderMap struct {
	mock.Mock
}

// Add provides a mock function with given fields: key, value
func (_m *RequestHeaderMap) Add(key string, value string) {
	_m.Called(key, value)
}

// ByteSize provides a mock function with given fields:
func (_m *RequestHeaderMap) ByteSize() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Del provides a mock function with given fields: key
func (_m *RequestHeaderMap) Del(key string) {
	_m.Called(key)
}

// Get provides a mock function with given fields: key
func (_m *RequestHeaderMap) Get(key string) (string, bool) {
	ret := _m.Called(key)

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetRaw provides a mock function with given fields: name
func (_m *RequestHeaderMap) GetRaw(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Host provides a mock function with given fields:
func (_m *RequestHeaderMap) Host() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Method provides a mock function with given fields:
func (_m *RequestHeaderMap) Method() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Path provides a mock function with given fields:
func (_m *RequestHeaderMap) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Protocol provides a mock function with given fields:
func (_m *RequestHeaderMap) Protocol() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Range provides a mock function with given fields: f
func (_m *RequestHeaderMap) Range(f func(string, string) bool) {
	_m.Called(f)
}

// RangeWithCopy provides a mock function with given fields: f
func (_m *RequestHeaderMap) RangeWithCopy(f func(string, string) bool) {
	_m.Called(f)
}

// Scheme provides a mock function with given fields:
func (_m *RequestHeaderMap) Scheme() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Set provides a mock function with given fields: key, value
func (_m *RequestHeaderMap) Set(key string, value string) {
	_m.Called(key, value)
}

// Values provides a mock function with given fields: key
func (_m *RequestHeaderMap) Values(key string) []string {
	ret := _m.Called(key)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NewRequestHeaderMap creates a new instance of RequestHeaderMap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestHeaderMap(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestHeaderMap {
	mock := &RequestHeaderMap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
