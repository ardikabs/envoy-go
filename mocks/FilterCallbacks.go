// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	api "github.com/envoyproxy/envoy/contrib/golang/common/go/api"
	mock "github.com/stretchr/testify/mock"
)

// FilterCallbacks is an autogenerated mock type for the FilterCallbacks type
type FilterCallbacks struct {
	mock.Mock
}

// Continue provides a mock function with given fields: _a0
func (_m *FilterCallbacks) Continue(_a0 api.StatusType) {
	_m.Called(_a0)
}

// Log provides a mock function with given fields: level, msg
func (_m *FilterCallbacks) Log(level api.LogType, msg string) {
	_m.Called(level, msg)
}

// LogLevel provides a mock function with given fields:
func (_m *FilterCallbacks) LogLevel() api.LogType {
	ret := _m.Called()

	var r0 api.LogType
	if rf, ok := ret.Get(0).(func() api.LogType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(api.LogType)
	}

	return r0
}

// RecoverPanic provides a mock function with given fields:
func (_m *FilterCallbacks) RecoverPanic() {
	_m.Called()
}

// SendLocalReply provides a mock function with given fields: responseCode, bodyText, headers, grpcStatus, details
func (_m *FilterCallbacks) SendLocalReply(responseCode int, bodyText string, headers map[string]string, grpcStatus int64, details string) {
	_m.Called(responseCode, bodyText, headers, grpcStatus, details)
}

// StreamInfo provides a mock function with given fields:
func (_m *FilterCallbacks) StreamInfo() api.StreamInfo {
	ret := _m.Called()

	var r0 api.StreamInfo
	if rf, ok := ret.Get(0).(func() api.StreamInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.StreamInfo)
		}
	}

	return r0
}

// NewFilterCallbacks creates a new instance of FilterCallbacks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilterCallbacks(t interface {
	mock.TestingT
	Cleanup(func())
}) *FilterCallbacks {
	mock := &FilterCallbacks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
