// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_gonvoy

import (
	api "github.com/envoyproxy/envoy/contrib/golang/common/go/api"

	mock "github.com/stretchr/testify/mock"
)

// Metrics is an autogenerated mock type for the Metrics type
type Metrics struct {
	mock.Mock
}

type Metrics_Expecter struct {
	mock *mock.Mock
}

func (_m *Metrics) EXPECT() *Metrics_Expecter {
	return &Metrics_Expecter{mock: &_m.Mock}
}

// Counter provides a mock function with given fields: name, labelKeyValues
func (_m *Metrics) Counter(name string, labelKeyValues ...string) api.CounterMetric {
	_va := make([]interface{}, len(labelKeyValues))
	for _i := range labelKeyValues {
		_va[_i] = labelKeyValues[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 api.CounterMetric
	if rf, ok := ret.Get(0).(func(string, ...string) api.CounterMetric); ok {
		r0 = rf(name, labelKeyValues...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.CounterMetric)
		}
	}

	return r0
}

// Metrics_Counter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Counter'
type Metrics_Counter_Call struct {
	*mock.Call
}

// Counter is a helper method to define mock.On call
//   - name string
//   - labelKeyValues ...string
func (_e *Metrics_Expecter) Counter(name interface{}, labelKeyValues ...interface{}) *Metrics_Counter_Call {
	return &Metrics_Counter_Call{Call: _e.mock.On("Counter",
		append([]interface{}{name}, labelKeyValues...)...)}
}

func (_c *Metrics_Counter_Call) Run(run func(name string, labelKeyValues ...string)) *Metrics_Counter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Metrics_Counter_Call) Return(_a0 api.CounterMetric) *Metrics_Counter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metrics_Counter_Call) RunAndReturn(run func(string, ...string) api.CounterMetric) *Metrics_Counter_Call {
	_c.Call.Return(run)
	return _c
}

// Gauge provides a mock function with given fields: name, labelKeyValues
func (_m *Metrics) Gauge(name string, labelKeyValues ...string) api.GaugeMetric {
	_va := make([]interface{}, len(labelKeyValues))
	for _i := range labelKeyValues {
		_va[_i] = labelKeyValues[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 api.GaugeMetric
	if rf, ok := ret.Get(0).(func(string, ...string) api.GaugeMetric); ok {
		r0 = rf(name, labelKeyValues...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.GaugeMetric)
		}
	}

	return r0
}

// Metrics_Gauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gauge'
type Metrics_Gauge_Call struct {
	*mock.Call
}

// Gauge is a helper method to define mock.On call
//   - name string
//   - labelKeyValues ...string
func (_e *Metrics_Expecter) Gauge(name interface{}, labelKeyValues ...interface{}) *Metrics_Gauge_Call {
	return &Metrics_Gauge_Call{Call: _e.mock.On("Gauge",
		append([]interface{}{name}, labelKeyValues...)...)}
}

func (_c *Metrics_Gauge_Call) Run(run func(name string, labelKeyValues ...string)) *Metrics_Gauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Metrics_Gauge_Call) Return(_a0 api.GaugeMetric) *Metrics_Gauge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metrics_Gauge_Call) RunAndReturn(run func(string, ...string) api.GaugeMetric) *Metrics_Gauge_Call {
	_c.Call.Return(run)
	return _c
}

// Histogram provides a mock function with given fields: name, labelKeyValues
func (_m *Metrics) Histogram(name string, labelKeyValues ...string) api.HistogramMetric {
	_va := make([]interface{}, len(labelKeyValues))
	for _i := range labelKeyValues {
		_va[_i] = labelKeyValues[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 api.HistogramMetric
	if rf, ok := ret.Get(0).(func(string, ...string) api.HistogramMetric); ok {
		r0 = rf(name, labelKeyValues...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.HistogramMetric)
		}
	}

	return r0
}

// Metrics_Histogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Histogram'
type Metrics_Histogram_Call struct {
	*mock.Call
}

// Histogram is a helper method to define mock.On call
//   - name string
//   - labelKeyValues ...string
func (_e *Metrics_Expecter) Histogram(name interface{}, labelKeyValues ...interface{}) *Metrics_Histogram_Call {
	return &Metrics_Histogram_Call{Call: _e.mock.On("Histogram",
		append([]interface{}{name}, labelKeyValues...)...)}
}

func (_c *Metrics_Histogram_Call) Run(run func(name string, labelKeyValues ...string)) *Metrics_Histogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Metrics_Histogram_Call) Return(_a0 api.HistogramMetric) *Metrics_Histogram_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metrics_Histogram_Call) RunAndReturn(run func(string, ...string) api.HistogramMetric) *Metrics_Histogram_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetrics creates a new instance of Metrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *Metrics {
	mock := &Metrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
