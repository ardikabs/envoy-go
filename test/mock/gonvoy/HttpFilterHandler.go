// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_gonvoy

import (
	http "net/http"

	gonvoy "github.com/ardikabs/gonvoy"

	mock "github.com/stretchr/testify/mock"
)

// HttpFilterHandler is an autogenerated mock type for the HttpFilterHandler type
type HttpFilterHandler struct {
	mock.Mock
}

type HttpFilterHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *HttpFilterHandler) EXPECT() *HttpFilterHandler_Expecter {
	return &HttpFilterHandler_Expecter{mock: &_m.Mock}
}

// Disable provides a mock function with given fields:
func (_m *HttpFilterHandler) Disable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HttpFilterHandler_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type HttpFilterHandler_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
func (_e *HttpFilterHandler_Expecter) Disable() *HttpFilterHandler_Disable_Call {
	return &HttpFilterHandler_Disable_Call{Call: _e.mock.On("Disable")}
}

func (_c *HttpFilterHandler_Disable_Call) Run(run func()) *HttpFilterHandler_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HttpFilterHandler_Disable_Call) Return(_a0 bool) *HttpFilterHandler_Disable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpFilterHandler_Disable_Call) RunAndReturn(run func() bool) *HttpFilterHandler_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// OnRequestBody provides a mock function with given fields: c, body
func (_m *HttpFilterHandler) OnRequestBody(c gonvoy.Context, body []byte) error {
	ret := _m.Called(c, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(gonvoy.Context, []byte) error); ok {
		r0 = rf(c, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HttpFilterHandler_OnRequestBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRequestBody'
type HttpFilterHandler_OnRequestBody_Call struct {
	*mock.Call
}

// OnRequestBody is a helper method to define mock.On call
//   - c gonvoy.Context
//   - body []byte
func (_e *HttpFilterHandler_Expecter) OnRequestBody(c interface{}, body interface{}) *HttpFilterHandler_OnRequestBody_Call {
	return &HttpFilterHandler_OnRequestBody_Call{Call: _e.mock.On("OnRequestBody", c, body)}
}

func (_c *HttpFilterHandler_OnRequestBody_Call) Run(run func(c gonvoy.Context, body []byte)) *HttpFilterHandler_OnRequestBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.Context), args[1].([]byte))
	})
	return _c
}

func (_c *HttpFilterHandler_OnRequestBody_Call) Return(_a0 error) *HttpFilterHandler_OnRequestBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpFilterHandler_OnRequestBody_Call) RunAndReturn(run func(gonvoy.Context, []byte) error) *HttpFilterHandler_OnRequestBody_Call {
	_c.Call.Return(run)
	return _c
}

// OnRequestHeader provides a mock function with given fields: c, header
func (_m *HttpFilterHandler) OnRequestHeader(c gonvoy.Context, header http.Header) error {
	ret := _m.Called(c, header)

	var r0 error
	if rf, ok := ret.Get(0).(func(gonvoy.Context, http.Header) error); ok {
		r0 = rf(c, header)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HttpFilterHandler_OnRequestHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRequestHeader'
type HttpFilterHandler_OnRequestHeader_Call struct {
	*mock.Call
}

// OnRequestHeader is a helper method to define mock.On call
//   - c gonvoy.Context
//   - header http.Header
func (_e *HttpFilterHandler_Expecter) OnRequestHeader(c interface{}, header interface{}) *HttpFilterHandler_OnRequestHeader_Call {
	return &HttpFilterHandler_OnRequestHeader_Call{Call: _e.mock.On("OnRequestHeader", c, header)}
}

func (_c *HttpFilterHandler_OnRequestHeader_Call) Run(run func(c gonvoy.Context, header http.Header)) *HttpFilterHandler_OnRequestHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.Context), args[1].(http.Header))
	})
	return _c
}

func (_c *HttpFilterHandler_OnRequestHeader_Call) Return(_a0 error) *HttpFilterHandler_OnRequestHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpFilterHandler_OnRequestHeader_Call) RunAndReturn(run func(gonvoy.Context, http.Header) error) *HttpFilterHandler_OnRequestHeader_Call {
	_c.Call.Return(run)
	return _c
}

// OnResponseBody provides a mock function with given fields: c, body
func (_m *HttpFilterHandler) OnResponseBody(c gonvoy.Context, body []byte) error {
	ret := _m.Called(c, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(gonvoy.Context, []byte) error); ok {
		r0 = rf(c, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HttpFilterHandler_OnResponseBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnResponseBody'
type HttpFilterHandler_OnResponseBody_Call struct {
	*mock.Call
}

// OnResponseBody is a helper method to define mock.On call
//   - c gonvoy.Context
//   - body []byte
func (_e *HttpFilterHandler_Expecter) OnResponseBody(c interface{}, body interface{}) *HttpFilterHandler_OnResponseBody_Call {
	return &HttpFilterHandler_OnResponseBody_Call{Call: _e.mock.On("OnResponseBody", c, body)}
}

func (_c *HttpFilterHandler_OnResponseBody_Call) Run(run func(c gonvoy.Context, body []byte)) *HttpFilterHandler_OnResponseBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.Context), args[1].([]byte))
	})
	return _c
}

func (_c *HttpFilterHandler_OnResponseBody_Call) Return(_a0 error) *HttpFilterHandler_OnResponseBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpFilterHandler_OnResponseBody_Call) RunAndReturn(run func(gonvoy.Context, []byte) error) *HttpFilterHandler_OnResponseBody_Call {
	_c.Call.Return(run)
	return _c
}

// OnResponseHeader provides a mock function with given fields: c, header
func (_m *HttpFilterHandler) OnResponseHeader(c gonvoy.Context, header http.Header) error {
	ret := _m.Called(c, header)

	var r0 error
	if rf, ok := ret.Get(0).(func(gonvoy.Context, http.Header) error); ok {
		r0 = rf(c, header)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HttpFilterHandler_OnResponseHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnResponseHeader'
type HttpFilterHandler_OnResponseHeader_Call struct {
	*mock.Call
}

// OnResponseHeader is a helper method to define mock.On call
//   - c gonvoy.Context
//   - header http.Header
func (_e *HttpFilterHandler_Expecter) OnResponseHeader(c interface{}, header interface{}) *HttpFilterHandler_OnResponseHeader_Call {
	return &HttpFilterHandler_OnResponseHeader_Call{Call: _e.mock.On("OnResponseHeader", c, header)}
}

func (_c *HttpFilterHandler_OnResponseHeader_Call) Run(run func(c gonvoy.Context, header http.Header)) *HttpFilterHandler_OnResponseHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.Context), args[1].(http.Header))
	})
	return _c
}

func (_c *HttpFilterHandler_OnResponseHeader_Call) Return(_a0 error) *HttpFilterHandler_OnResponseHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpFilterHandler_OnResponseHeader_Call) RunAndReturn(run func(gonvoy.Context, http.Header) error) *HttpFilterHandler_OnResponseHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewHttpFilterHandler creates a new instance of HttpFilterHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpFilterHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpFilterHandler {
	mock := &HttpFilterHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
