// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_gonvoy

import (
	gonvoy "github.com/ardikabs/gonvoy"
	api "github.com/envoyproxy/envoy/contrib/golang/common/go/api"

	mock "github.com/stretchr/testify/mock"
)

// Configuration is an autogenerated mock type for the Configuration type
type Configuration struct {
	mock.Mock
}

type Configuration_Expecter struct {
	mock *mock.Mock
}

func (_m *Configuration) EXPECT() *Configuration_Expecter {
	return &Configuration_Expecter{mock: &_m.Mock}
}

// Cache provides a mock function with given fields:
func (_m *Configuration) Cache() gonvoy.Cache {
	ret := _m.Called()

	var r0 gonvoy.Cache
	if rf, ok := ret.Get(0).(func() gonvoy.Cache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gonvoy.Cache)
		}
	}

	return r0
}

// Configuration_Cache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cache'
type Configuration_Cache_Call struct {
	*mock.Call
}

// Cache is a helper method to define mock.On call
func (_e *Configuration_Expecter) Cache() *Configuration_Cache_Call {
	return &Configuration_Cache_Call{Call: _e.mock.On("Cache")}
}

func (_c *Configuration_Cache_Call) Run(run func()) *Configuration_Cache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Configuration_Cache_Call) Return(_a0 gonvoy.Cache) *Configuration_Cache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Configuration_Cache_Call) RunAndReturn(run func() gonvoy.Cache) *Configuration_Cache_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigCallbacks provides a mock function with given fields:
func (_m *Configuration) GetConfigCallbacks() api.ConfigCallbacks {
	ret := _m.Called()

	var r0 api.ConfigCallbacks
	if rf, ok := ret.Get(0).(func() api.ConfigCallbacks); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ConfigCallbacks)
		}
	}

	return r0
}

// Configuration_GetConfigCallbacks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigCallbacks'
type Configuration_GetConfigCallbacks_Call struct {
	*mock.Call
}

// GetConfigCallbacks is a helper method to define mock.On call
func (_e *Configuration_Expecter) GetConfigCallbacks() *Configuration_GetConfigCallbacks_Call {
	return &Configuration_GetConfigCallbacks_Call{Call: _e.mock.On("GetConfigCallbacks")}
}

func (_c *Configuration_GetConfigCallbacks_Call) Run(run func()) *Configuration_GetConfigCallbacks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Configuration_GetConfigCallbacks_Call) Return(_a0 api.ConfigCallbacks) *Configuration_GetConfigCallbacks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Configuration_GetConfigCallbacks_Call) RunAndReturn(run func() api.ConfigCallbacks) *Configuration_GetConfigCallbacks_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilterConfig provides a mock function with given fields:
func (_m *Configuration) GetFilterConfig() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Configuration_GetFilterConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilterConfig'
type Configuration_GetFilterConfig_Call struct {
	*mock.Call
}

// GetFilterConfig is a helper method to define mock.On call
func (_e *Configuration_Expecter) GetFilterConfig() *Configuration_GetFilterConfig_Call {
	return &Configuration_GetFilterConfig_Call{Call: _e.mock.On("GetFilterConfig")}
}

func (_c *Configuration_GetFilterConfig_Call) Run(run func()) *Configuration_GetFilterConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Configuration_GetFilterConfig_Call) Return(_a0 interface{}) *Configuration_GetFilterConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Configuration_GetFilterConfig_Call) RunAndReturn(run func() interface{}) *Configuration_GetFilterConfig_Call {
	_c.Call.Return(run)
	return _c
}

// metricCounter provides a mock function with given fields: name
func (_m *Configuration) metricCounter(name string) api.CounterMetric {
	ret := _m.Called(name)

	var r0 api.CounterMetric
	if rf, ok := ret.Get(0).(func(string) api.CounterMetric); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.CounterMetric)
		}
	}

	return r0
}

// Configuration_metricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'metricCounter'
type Configuration_metricCounter_Call struct {
	*mock.Call
}

// metricCounter is a helper method to define mock.On call
//   - name string
func (_e *Configuration_Expecter) metricCounter(name interface{}) *Configuration_metricCounter_Call {
	return &Configuration_metricCounter_Call{Call: _e.mock.On("metricCounter", name)}
}

func (_c *Configuration_metricCounter_Call) Run(run func(name string)) *Configuration_metricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Configuration_metricCounter_Call) Return(_a0 api.CounterMetric) *Configuration_metricCounter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Configuration_metricCounter_Call) RunAndReturn(run func(string) api.CounterMetric) *Configuration_metricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// metricGauge provides a mock function with given fields: name
func (_m *Configuration) metricGauge(name string) api.GaugeMetric {
	ret := _m.Called(name)

	var r0 api.GaugeMetric
	if rf, ok := ret.Get(0).(func(string) api.GaugeMetric); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.GaugeMetric)
		}
	}

	return r0
}

// Configuration_metricGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'metricGauge'
type Configuration_metricGauge_Call struct {
	*mock.Call
}

// metricGauge is a helper method to define mock.On call
//   - name string
func (_e *Configuration_Expecter) metricGauge(name interface{}) *Configuration_metricGauge_Call {
	return &Configuration_metricGauge_Call{Call: _e.mock.On("metricGauge", name)}
}

func (_c *Configuration_metricGauge_Call) Run(run func(name string)) *Configuration_metricGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Configuration_metricGauge_Call) Return(_a0 api.GaugeMetric) *Configuration_metricGauge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Configuration_metricGauge_Call) RunAndReturn(run func(string) api.GaugeMetric) *Configuration_metricGauge_Call {
	_c.Call.Return(run)
	return _c
}

// metricHistogram provides a mock function with given fields: name
func (_m *Configuration) metricHistogram(name string) api.HistogramMetric {
	ret := _m.Called(name)

	var r0 api.HistogramMetric
	if rf, ok := ret.Get(0).(func(string) api.HistogramMetric); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.HistogramMetric)
		}
	}

	return r0
}

// Configuration_metricHistogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'metricHistogram'
type Configuration_metricHistogram_Call struct {
	*mock.Call
}

// metricHistogram is a helper method to define mock.On call
//   - name string
func (_e *Configuration_Expecter) metricHistogram(name interface{}) *Configuration_metricHistogram_Call {
	return &Configuration_metricHistogram_Call{Call: _e.mock.On("metricHistogram", name)}
}

func (_c *Configuration_metricHistogram_Call) Run(run func(name string)) *Configuration_metricHistogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Configuration_metricHistogram_Call) Return(_a0 api.HistogramMetric) *Configuration_metricHistogram_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Configuration_metricHistogram_Call) RunAndReturn(run func(string) api.HistogramMetric) *Configuration_metricHistogram_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfiguration creates a new instance of Configuration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfiguration(t interface {
	mock.TestingT
	Cleanup(func())
}) *Configuration {
	mock := &Configuration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
