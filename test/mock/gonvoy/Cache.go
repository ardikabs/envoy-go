// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_gonvoy

import mock "github.com/stretchr/testify/mock"

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: key, receiver
func (_m *Cache) Load(key interface{}, receiver interface{}) (bool, error) {
	ret := _m.Called(key, receiver)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) (bool, error)); ok {
		return rf(key, receiver)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) bool); ok {
		r0 = rf(key, receiver)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}) error); ok {
		r1 = rf(key, receiver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type Cache_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - key interface{}
//   - receiver interface{}
func (_e *Cache_Expecter) Load(key interface{}, receiver interface{}) *Cache_Load_Call {
	return &Cache_Load_Call{Call: _e.mock.On("Load", key, receiver)}
}

func (_c *Cache_Load_Call) Run(run func(key interface{}, receiver interface{})) *Cache_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *Cache_Load_Call) Return(ok bool, err error) *Cache_Load_Call {
	_c.Call.Return(ok, err)
	return _c
}

func (_c *Cache_Load_Call) RunAndReturn(run func(interface{}, interface{}) (bool, error)) *Cache_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: key, value
func (_m *Cache) Store(key interface{}, value interface{}) {
	_m.Called(key, value)
}

// Cache_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type Cache_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - key interface{}
//   - value interface{}
func (_e *Cache_Expecter) Store(key interface{}, value interface{}) *Cache_Store_Call {
	return &Cache_Store_Call{Call: _e.mock.On("Store", key, value)}
}

func (_c *Cache_Store_Call) Run(run func(key interface{}, value interface{})) *Cache_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *Cache_Store_Call) Return() *Cache_Store_Call {
	_c.Call.Return()
	return _c
}

func (_c *Cache_Store_Call) RunAndReturn(run func(interface{}, interface{})) *Cache_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
