// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_gonvoy

import (
	gonvoy "github.com/ardikabs/gonvoy"
	api "github.com/envoyproxy/envoy/contrib/golang/common/go/api"

	mock "github.com/stretchr/testify/mock"
)

// HttpFilterHandlerManager is an autogenerated mock type for the HttpFilterHandlerManager type
type HttpFilterHandlerManager struct {
	mock.Mock
}

type HttpFilterHandlerManager_Expecter struct {
	mock *mock.Mock
}

func (_m *HttpFilterHandlerManager) EXPECT() *HttpFilterHandlerManager_Expecter {
	return &HttpFilterHandlerManager_Expecter{mock: &_m.Mock}
}

// RegisterHandler provides a mock function with given fields: _a0
func (_m *HttpFilterHandlerManager) RegisterHandler(_a0 gonvoy.HttpFilterHandler) {
	_m.Called(_a0)
}

// HttpFilterHandlerManager_RegisterHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHandler'
type HttpFilterHandlerManager_RegisterHandler_Call struct {
	*mock.Call
}

// RegisterHandler is a helper method to define mock.On call
//   - _a0 gonvoy.HttpFilterHandler
func (_e *HttpFilterHandlerManager_Expecter) RegisterHandler(_a0 interface{}) *HttpFilterHandlerManager_RegisterHandler_Call {
	return &HttpFilterHandlerManager_RegisterHandler_Call{Call: _e.mock.On("RegisterHandler", _a0)}
}

func (_c *HttpFilterHandlerManager_RegisterHandler_Call) Run(run func(_a0 gonvoy.HttpFilterHandler)) *HttpFilterHandlerManager_RegisterHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.HttpFilterHandler))
	})
	return _c
}

func (_c *HttpFilterHandlerManager_RegisterHandler_Call) Return() *HttpFilterHandlerManager_RegisterHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *HttpFilterHandlerManager_RegisterHandler_Call) RunAndReturn(run func(gonvoy.HttpFilterHandler)) *HttpFilterHandlerManager_RegisterHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Serve provides a mock function with given fields: _a0, _a1
func (_m *HttpFilterHandlerManager) Serve(_a0 gonvoy.Context, _a1 gonvoy.HttpFilterPhase) api.StatusType {
	ret := _m.Called(_a0, _a1)

	var r0 api.StatusType
	if rf, ok := ret.Get(0).(func(gonvoy.Context, gonvoy.HttpFilterPhase) api.StatusType); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(api.StatusType)
	}

	return r0
}

// HttpFilterHandlerManager_Serve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serve'
type HttpFilterHandlerManager_Serve_Call struct {
	*mock.Call
}

// Serve is a helper method to define mock.On call
//   - _a0 gonvoy.Context
//   - _a1 gonvoy.HttpFilterPhase
func (_e *HttpFilterHandlerManager_Expecter) Serve(_a0 interface{}, _a1 interface{}) *HttpFilterHandlerManager_Serve_Call {
	return &HttpFilterHandlerManager_Serve_Call{Call: _e.mock.On("Serve", _a0, _a1)}
}

func (_c *HttpFilterHandlerManager_Serve_Call) Run(run func(_a0 gonvoy.Context, _a1 gonvoy.HttpFilterPhase)) *HttpFilterHandlerManager_Serve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.Context), args[1].(gonvoy.HttpFilterPhase))
	})
	return _c
}

func (_c *HttpFilterHandlerManager_Serve_Call) Return(_a0 api.StatusType) *HttpFilterHandlerManager_Serve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpFilterHandlerManager_Serve_Call) RunAndReturn(run func(gonvoy.Context, gonvoy.HttpFilterPhase) api.StatusType) *HttpFilterHandlerManager_Serve_Call {
	_c.Call.Return(run)
	return _c
}

// SetErrorHandler provides a mock function with given fields: _a0
func (_m *HttpFilterHandlerManager) SetErrorHandler(_a0 gonvoy.ErrorHandler) {
	_m.Called(_a0)
}

// HttpFilterHandlerManager_SetErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetErrorHandler'
type HttpFilterHandlerManager_SetErrorHandler_Call struct {
	*mock.Call
}

// SetErrorHandler is a helper method to define mock.On call
//   - _a0 gonvoy.ErrorHandler
func (_e *HttpFilterHandlerManager_Expecter) SetErrorHandler(_a0 interface{}) *HttpFilterHandlerManager_SetErrorHandler_Call {
	return &HttpFilterHandlerManager_SetErrorHandler_Call{Call: _e.mock.On("SetErrorHandler", _a0)}
}

func (_c *HttpFilterHandlerManager_SetErrorHandler_Call) Run(run func(_a0 gonvoy.ErrorHandler)) *HttpFilterHandlerManager_SetErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gonvoy.ErrorHandler))
	})
	return _c
}

func (_c *HttpFilterHandlerManager_SetErrorHandler_Call) Return() *HttpFilterHandlerManager_SetErrorHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *HttpFilterHandlerManager_SetErrorHandler_Call) RunAndReturn(run func(gonvoy.ErrorHandler)) *HttpFilterHandlerManager_SetErrorHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewHttpFilterHandlerManager creates a new instance of HttpFilterHandlerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpFilterHandlerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpFilterHandlerManager {
	mock := &HttpFilterHandlerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
