// Code generated by mockery v2.46.1. DO NOT EDIT.

package mock_envoy

import mock "github.com/stretchr/testify/mock"

// ResponseHeaderMap is an autogenerated mock type for the ResponseHeaderMap type
type ResponseHeaderMap struct {
	mock.Mock
}

type ResponseHeaderMap_Expecter struct {
	mock *mock.Mock
}

func (_m *ResponseHeaderMap) EXPECT() *ResponseHeaderMap_Expecter {
	return &ResponseHeaderMap_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: key, value
func (_m *ResponseHeaderMap) Add(key string, value string) {
	_m.Called(key, value)
}

// ResponseHeaderMap_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type ResponseHeaderMap_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *ResponseHeaderMap_Expecter) Add(key interface{}, value interface{}) *ResponseHeaderMap_Add_Call {
	return &ResponseHeaderMap_Add_Call{Call: _e.mock.On("Add", key, value)}
}

func (_c *ResponseHeaderMap_Add_Call) Run(run func(key string, value string)) *ResponseHeaderMap_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ResponseHeaderMap_Add_Call) Return() *ResponseHeaderMap_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResponseHeaderMap_Add_Call) RunAndReturn(run func(string, string)) *ResponseHeaderMap_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function with given fields: key
func (_m *ResponseHeaderMap) Del(key string) {
	_m.Called(key)
}

// ResponseHeaderMap_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type ResponseHeaderMap_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - key string
func (_e *ResponseHeaderMap_Expecter) Del(key interface{}) *ResponseHeaderMap_Del_Call {
	return &ResponseHeaderMap_Del_Call{Call: _e.mock.On("Del", key)}
}

func (_c *ResponseHeaderMap_Del_Call) Run(run func(key string)) *ResponseHeaderMap_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ResponseHeaderMap_Del_Call) Return() *ResponseHeaderMap_Del_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResponseHeaderMap_Del_Call) RunAndReturn(run func(string)) *ResponseHeaderMap_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *ResponseHeaderMap) Get(key string) (string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ResponseHeaderMap_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ResponseHeaderMap_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *ResponseHeaderMap_Expecter) Get(key interface{}) *ResponseHeaderMap_Get_Call {
	return &ResponseHeaderMap_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *ResponseHeaderMap_Get_Call) Run(run func(key string)) *ResponseHeaderMap_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ResponseHeaderMap_Get_Call) Return(_a0 string, _a1 bool) *ResponseHeaderMap_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResponseHeaderMap_Get_Call) RunAndReturn(run func(string) (string, bool)) *ResponseHeaderMap_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllHeaders provides a mock function with given fields:
func (_m *ResponseHeaderMap) GetAllHeaders() map[string][]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllHeaders")
	}

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func() map[string][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	return r0
}

// ResponseHeaderMap_GetAllHeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllHeaders'
type ResponseHeaderMap_GetAllHeaders_Call struct {
	*mock.Call
}

// GetAllHeaders is a helper method to define mock.On call
func (_e *ResponseHeaderMap_Expecter) GetAllHeaders() *ResponseHeaderMap_GetAllHeaders_Call {
	return &ResponseHeaderMap_GetAllHeaders_Call{Call: _e.mock.On("GetAllHeaders")}
}

func (_c *ResponseHeaderMap_GetAllHeaders_Call) Run(run func()) *ResponseHeaderMap_GetAllHeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResponseHeaderMap_GetAllHeaders_Call) Return(_a0 map[string][]string) *ResponseHeaderMap_GetAllHeaders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResponseHeaderMap_GetAllHeaders_Call) RunAndReturn(run func() map[string][]string) *ResponseHeaderMap_GetAllHeaders_Call {
	_c.Call.Return(run)
	return _c
}

// GetRaw provides a mock function with given fields: name
func (_m *ResponseHeaderMap) GetRaw(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetRaw")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ResponseHeaderMap_GetRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRaw'
type ResponseHeaderMap_GetRaw_Call struct {
	*mock.Call
}

// GetRaw is a helper method to define mock.On call
//   - name string
func (_e *ResponseHeaderMap_Expecter) GetRaw(name interface{}) *ResponseHeaderMap_GetRaw_Call {
	return &ResponseHeaderMap_GetRaw_Call{Call: _e.mock.On("GetRaw", name)}
}

func (_c *ResponseHeaderMap_GetRaw_Call) Run(run func(name string)) *ResponseHeaderMap_GetRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ResponseHeaderMap_GetRaw_Call) Return(_a0 string) *ResponseHeaderMap_GetRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResponseHeaderMap_GetRaw_Call) RunAndReturn(run func(string) string) *ResponseHeaderMap_GetRaw_Call {
	_c.Call.Return(run)
	return _c
}

// Range provides a mock function with given fields: f
func (_m *ResponseHeaderMap) Range(f func(string, string) bool) {
	_m.Called(f)
}

// ResponseHeaderMap_Range_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Range'
type ResponseHeaderMap_Range_Call struct {
	*mock.Call
}

// Range is a helper method to define mock.On call
//   - f func(string , string) bool
func (_e *ResponseHeaderMap_Expecter) Range(f interface{}) *ResponseHeaderMap_Range_Call {
	return &ResponseHeaderMap_Range_Call{Call: _e.mock.On("Range", f)}
}

func (_c *ResponseHeaderMap_Range_Call) Run(run func(f func(string, string) bool)) *ResponseHeaderMap_Range_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, string) bool))
	})
	return _c
}

func (_c *ResponseHeaderMap_Range_Call) Return() *ResponseHeaderMap_Range_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResponseHeaderMap_Range_Call) RunAndReturn(run func(func(string, string) bool)) *ResponseHeaderMap_Range_Call {
	_c.Call.Return(run)
	return _c
}

// RangeWithCopy provides a mock function with given fields: f
func (_m *ResponseHeaderMap) RangeWithCopy(f func(string, string) bool) {
	_m.Called(f)
}

// ResponseHeaderMap_RangeWithCopy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RangeWithCopy'
type ResponseHeaderMap_RangeWithCopy_Call struct {
	*mock.Call
}

// RangeWithCopy is a helper method to define mock.On call
//   - f func(string , string) bool
func (_e *ResponseHeaderMap_Expecter) RangeWithCopy(f interface{}) *ResponseHeaderMap_RangeWithCopy_Call {
	return &ResponseHeaderMap_RangeWithCopy_Call{Call: _e.mock.On("RangeWithCopy", f)}
}

func (_c *ResponseHeaderMap_RangeWithCopy_Call) Run(run func(f func(string, string) bool)) *ResponseHeaderMap_RangeWithCopy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, string) bool))
	})
	return _c
}

func (_c *ResponseHeaderMap_RangeWithCopy_Call) Return() *ResponseHeaderMap_RangeWithCopy_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResponseHeaderMap_RangeWithCopy_Call) RunAndReturn(run func(func(string, string) bool)) *ResponseHeaderMap_RangeWithCopy_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *ResponseHeaderMap) Set(key string, value string) {
	_m.Called(key, value)
}

// ResponseHeaderMap_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type ResponseHeaderMap_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *ResponseHeaderMap_Expecter) Set(key interface{}, value interface{}) *ResponseHeaderMap_Set_Call {
	return &ResponseHeaderMap_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *ResponseHeaderMap_Set_Call) Run(run func(key string, value string)) *ResponseHeaderMap_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ResponseHeaderMap_Set_Call) Return() *ResponseHeaderMap_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResponseHeaderMap_Set_Call) RunAndReturn(run func(string, string)) *ResponseHeaderMap_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields:
func (_m *ResponseHeaderMap) Status() (int, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 int
	var r1 bool
	if rf, ok := ret.Get(0).(func() (int, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ResponseHeaderMap_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type ResponseHeaderMap_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *ResponseHeaderMap_Expecter) Status() *ResponseHeaderMap_Status_Call {
	return &ResponseHeaderMap_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *ResponseHeaderMap_Status_Call) Run(run func()) *ResponseHeaderMap_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResponseHeaderMap_Status_Call) Return(_a0 int, _a1 bool) *ResponseHeaderMap_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResponseHeaderMap_Status_Call) RunAndReturn(run func() (int, bool)) *ResponseHeaderMap_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Values provides a mock function with given fields: key
func (_m *ResponseHeaderMap) Values(key string) []string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ResponseHeaderMap_Values_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Values'
type ResponseHeaderMap_Values_Call struct {
	*mock.Call
}

// Values is a helper method to define mock.On call
//   - key string
func (_e *ResponseHeaderMap_Expecter) Values(key interface{}) *ResponseHeaderMap_Values_Call {
	return &ResponseHeaderMap_Values_Call{Call: _e.mock.On("Values", key)}
}

func (_c *ResponseHeaderMap_Values_Call) Run(run func(key string)) *ResponseHeaderMap_Values_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ResponseHeaderMap_Values_Call) Return(_a0 []string) *ResponseHeaderMap_Values_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResponseHeaderMap_Values_Call) RunAndReturn(run func(string) []string) *ResponseHeaderMap_Values_Call {
	_c.Call.Return(run)
	return _c
}

// NewResponseHeaderMap creates a new instance of ResponseHeaderMap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponseHeaderMap(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResponseHeaderMap {
	mock := &ResponseHeaderMap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
